modeltype UML "strict" uses MetamodeloSimplificadoUML('http://metamodelo-simplificado-uml.ecore');
modeltype ER "strict" uses MetamodeloEntidadRelacion('http://metamodelo-entidad-relacion.ecore');

transformation QVTClass2Entity(in entrada: UML, out salida: ER);

main() {
    entrada.objects()[Package] -> map Package2Schema();
    
    -- Eliminar tablas sin columnas
//    salida.objects()[Table] -> forEach(t) {
//        if(t.column -> isEmpty()) {
//            log('Eliminando tabla vacía: ' + t.name);
//            
//        }
//    }
}

mapping UML::Package:: Package2Schema() : ER::Schema {
	name := self.name;
	table := self.Class -> map Class2Table();
	table += self.Class -> map Class2TableForeignKeys();
	self.Class -> reject(c | c.isRedundant()) -> forEach(t | t.remove()); 
}

-- Función auxiliar para determinar si una clase es redundante
helper UML::Class::isRedundant() : Boolean {
	return self.name.startsWith('Temp');
}

mapping UML::Class:: Class2Table() : ER::Table {
	name := self.name;
	column := self.attribute -> map Attribute2Column();
	-- agregar PrimaryKey
	var tmp_column_pkey = self.map Class2PrimaryKey();
	pkey := tmp_column_pkey;
	column += tmp_column_pkey;
}

mapping UML::Attribute:: Attribute2Column() : ER::Column when {self.type.oclIsTypeOf(PrimitiveDataType)} {
	name := self.name;
	type := self.type.name;
}

mapping Class::Class2PrimaryKey() : Column {
	name := 'id';
	type := 'Integer';
}

mapping UML::Class::Class2TableForeignKeys() : ER::Table {
	name := self.name;
	column := self.attribute -> map Attribute2Column();  
    -- agregar PrimaryKey
	var tmp_column_pkey = self.map Class2PrimaryKey();
	pkey := tmp_column_pkey;
	column += tmp_column_pkey;
	-- agregar ForeignKey
	foreignkey := self.attribute -> Attribute2ForeignKey();
}

mapping UML::Attribute:: Attribute2ForeignKey() : ER::ForeignKey when {self.type.oclIsTypeOf(Class)} {
	salida.objects()[Table] -> forEach(t) {
		if(t.name.equalsIgnoreCase(self.type.name)) {
			t.column -> forEach(c) {
				if(c.name.equalsIgnoreCase('id')) {
					log('tabla:' + t.name + ' column:' + c.name);
					fkey := c;
					refs := t;
				}
			}
		}
	}
}